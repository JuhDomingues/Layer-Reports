// Diagn√≥stico Completo da API Real
class APIDiagnostics {
    constructor() {
        this.results = {
            environment: {},
            facebook: {},
            permissions: {},
            connectivity: {},
            recommendations: []
        };
    }

    async runFullDiagnostics() {
        console.log('üîç === DIAGN√ìSTICO COMPLETO DA API REAL ===');
        console.log('');

        await this.checkEnvironment();
        await this.checkFacebookSDK();
        await this.checkAppConfiguration();
        await this.checkPermissions();
        await this.checkConnectivity();
        
        this.generateRecommendations();
        this.displayResults();
        
        return this.results;
    }

    async checkEnvironment() {
        console.log('1Ô∏è‚É£ Verificando Ambiente...');
        
        const env = {
            protocol: window.location.protocol,
            hostname: window.location.hostname,
            port: window.location.port,
            isHttps: window.location.protocol === 'https:',
            isLocalhost: ['localhost', '127.0.0.1', '::1'].includes(window.location.hostname),
            userAgent: navigator.userAgent,
            language: navigator.language
        };

        this.results.environment = env;

        console.log(`   üìç URL: ${window.location.href}`);
        console.log(`   üîí HTTPS: ${env.isHttps ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üè† Localhost: ${env.isLocalhost ? '‚úÖ' : '‚ùå'}`);
        
        if (!env.isHttps && !env.isLocalhost) {
            console.warn('   ‚ö†Ô∏è  Facebook SDK requer HTTPS ou localhost!');
            this.results.recommendations.push('Use HTTPS ou acesse via localhost para ativar a API real');
        }
        
        console.log('');
    }

    async checkFacebookSDK() {
        console.log('2Ô∏è‚É£ Verificando Facebook SDK...');
        
        const facebook = {
            sdkLoaded: typeof window.FB !== 'undefined',
            scriptTag: !!document.getElementById('facebook-jssdk'),
            fbAsyncInit: typeof window.fbAsyncInit === 'function',
            appId: window.metaAdsApp?.api?.facebookAppId || 'n√£o definido',
            mode: window.metaAdsApp?.api?.mode || 'n√£o definido'
        };

        this.results.facebook = facebook;

        console.log(`   üì¶ SDK Carregado: ${facebook.sdkLoaded ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üè∑Ô∏è  Script Tag: ${facebook.scriptTag ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üîß fbAsyncInit: ${facebook.fbAsyncInit ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üÜî App ID: ${facebook.appId}`);
        console.log(`   üé≠ Modo: ${facebook.mode}`);

        if (!facebook.sdkLoaded) {
            console.log('   üîÑ Tentando carregar SDK...');
            try {
                if (window.metaAdsApp?.api?.initFacebookSDK) {
                    await window.metaAdsApp.api.initFacebookSDK();
                    this.results.facebook.sdkLoaded = typeof window.FB !== 'undefined';
                    console.log(`   üì¶ SDK Carregado ap√≥s init: ${this.results.facebook.sdkLoaded ? '‚úÖ' : '‚ùå'}`);
                }
            } catch (error) {
                console.error('   ‚ùå Erro ao carregar SDK:', error.message);
                this.results.recommendations.push('Erro ao carregar Facebook SDK - verifique conex√£o e configura√ß√µes');
            }
        }
        
        console.log('');
    }

    async checkAppConfiguration() {
        console.log('3Ô∏è‚É£ Verificando Configura√ß√£o do App...');
        
        const api = window.metaAdsApp?.api;
        if (!api) {
            console.error('   ‚ùå API n√£o encontrada');
            return;
        }

        const config = {
            appId: api.facebookAppId,
            accessToken: !!api.accessToken,
            tokenExpiry: api.tokenExpiresAt,
            accountId: api.accountId,
            permissions: api.requiredPermissions,
            connectionStatus: api.connectionStatus
        };

        console.log(`   üÜî App ID: ${config.appId}`);
        console.log(`   üîë Access Token: ${config.accessToken ? '‚úÖ Presente' : '‚ùå Ausente'}`);
        console.log(`   ‚è∞ Token Expiry: ${config.tokenExpiry ? new Date(config.tokenExpiry).toLocaleString() : 'N√£o definido'}`);
        console.log(`   üí≥ Account ID: ${config.accountId || 'N√£o selecionado'}`);
        console.log(`   üîó Status: ${config.connectionStatus}`);
        console.log(`   üé´ Permiss√µes: ${config.permissions.join(', ')}`);

        // Verificar se o App ID √© v√°lido
        if (config.appId === '778309504913999') {
            console.log('   ‚úÖ Usando App ID padr√£o');
        } else {
            console.log('   üîß Usando App ID customizado');
        }

        // Verificar expira√ß√£o do token
        if (config.tokenExpiry && config.tokenExpiry < Date.now()) {
            console.warn('   ‚ö†Ô∏è  Token expirado');
            this.results.recommendations.push('Token de acesso expirado - fa√ßa login novamente');
        }
        
        console.log('');
    }

    async checkPermissions() {
        console.log('4Ô∏è‚É£ Verificando Permiss√µes...');
        
        if (typeof window.FB === 'undefined') {
            console.log('   ‚ùå SDK n√£o carregado - pulando verifica√ß√£o de permiss√µes');
            return;
        }

        try {
            const loginStatus = await new Promise((resolve) => {
                window.FB.getLoginStatus(resolve);
            });

            console.log(`   üìä Status de Login: ${loginStatus.status}`);
            
            if (loginStatus.status === 'connected') {
                console.log('   ‚úÖ Usu√°rio conectado');
                
                // Verificar permiss√µes concedidas
                const permissions = await new Promise((resolve) => {
                    window.FB.api('/me/permissions', resolve);
                });

                if (permissions.data) {
                    const granted = permissions.data.filter(p => p.status === 'granted').map(p => p.permission);
                    const declined = permissions.data.filter(p => p.status === 'declined').map(p => p.permission);
                    
                    console.log(`   ‚úÖ Permiss√µes Concedidas: ${granted.join(', ')}`);
                    if (declined.length > 0) {
                        console.log(`   ‚ùå Permiss√µes Negadas: ${declined.join(', ')}`);
                        this.results.recommendations.push('Algumas permiss√µes foram negadas - isso pode afetar a funcionalidade');
                    }
                    
                    this.results.permissions = { granted, declined };
                }
            } else {
                console.log('   ‚ùå Usu√°rio n√£o conectado');
                this.results.recommendations.push('Usu√°rio n√£o est√° conectado - clique em "Conectar Facebook"');
            }
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar permiss√µes:', error);
        }
        
        console.log('');
    }

    async checkConnectivity() {
        console.log('5Ô∏è‚É£ Verificando Conectividade...');
        
        // Testar conex√£o com Facebook Graph API
        try {
            const response = await fetch('https://graph.facebook.com/v18.0/', {
                method: 'GET',
                mode: 'cors'
            });
            
            if (response.ok) {
                console.log('   ‚úÖ Conex√£o com Graph API: OK');
                this.results.connectivity.graphApi = true;
            } else {
                console.log('   ‚ùå Conex√£o com Graph API: Falhou');
                this.results.connectivity.graphApi = false;
            }
        } catch (error) {
            console.log('   ‚ùå Erro de rede:', error.message);
            this.results.connectivity.graphApi = false;
            this.results.recommendations.push('Problemas de conectividade - verifique sua conex√£o de internet');
        }

        // Testar se o dom√≠nio est√° configurado no Facebook App
        try {
            const currentDomain = window.location.origin;
            console.log(`   üåê Dom√≠nio atual: ${currentDomain}`);
            
            const validDomains = [
                'https://localhost:8000',
                'https://layer-reports.vercel.app',
                'http://localhost:8000',
                'http://127.0.0.1:8000'
            ];
            
            const domainValid = validDomains.includes(currentDomain) || 
                               currentDomain.includes('localhost') || 
                               currentDomain.includes('127.0.0.1');
            
            if (domainValid) {
                console.log('   ‚úÖ Dom√≠nio reconhecido');
            } else {
                console.log('   ‚ö†Ô∏è  Dom√≠nio pode n√£o estar configurado no Facebook App');
                this.results.recommendations.push('Adicione este dom√≠nio √†s configura√ß√µes do Facebook App');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar dom√≠nio:', error);
        }
        
        console.log('');
    }

    generateRecommendations() {
        console.log('6Ô∏è‚É£ Gerando Recomenda√ß√µes...');
        
        const env = this.results.environment;
        const fb = this.results.facebook;
        
        // Recomenda√ß√µes baseadas no ambiente
        if (!env.isHttps && !env.isLocalhost) {
            this.results.recommendations.unshift('CR√çTICO: Use HTTPS ou localhost para habilitar API real');
        }
        
        // Recomenda√ß√µes baseadas no SDK
        if (!fb.sdkLoaded) {
            this.results.recommendations.push('Recarregue a p√°gina se o SDK n√£o carregar');
        }
        
        // Recomenda√ß√µes gerais
        if (this.results.recommendations.length === 0) {
            this.results.recommendations.push('Configura√ß√£o parece estar correta - tente fazer login');
        }
        
        console.log('');
    }

    displayResults() {
        console.log('üìã === RESUMO DO DIAGN√ìSTICO ===');
        console.log('');
        
        // Status geral
        const env = this.results.environment;
        const fb = this.results.facebook;
        const canUseRealAPI = (env.isHttps || env.isLocalhost) && fb.sdkLoaded;
        
        console.log(`üéØ API Real Dispon√≠vel: ${canUseRealAPI ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        console.log('');
        
        // Recomenda√ß√µes
        console.log('üí° RECOMENDA√á√ïES:');
        this.results.recommendations.forEach((rec, index) => {
            console.log(`   ${index + 1}. ${rec}`);
        });
        console.log('');
        
        // Comandos √∫teis
        console.log('üõ†Ô∏è COMANDOS √öTEIS:');
        console.log('   ‚Ä¢ runAPIDiagnostics() - Executar este diagn√≥stico novamente');
        console.log('   ‚Ä¢ window.metaAdsApp.handleFacebookLogin() - Tentar login manual');
        console.log('   ‚Ä¢ debugFacebookConnection() - Debug detalhado da conex√£o');
        console.log('   ‚Ä¢ window.metaAdsApp.api.setMode("real") - For√ßar modo real');
        console.log('');
        
        return this.results;
    }
}

// Fun√ß√£o global para executar diagn√≥sticos
window.runAPIDiagnostics = async function() {
    const diagnostics = new APIDiagnostics();
    return await diagnostics.runFullDiagnostics();
};

// Fun√ß√£o para teste r√°pido de login
window.quickLoginTest = async function() {
    console.log('‚ö° === TESTE R√ÅPIDO DE LOGIN ===');
    
    const app = window.metaAdsApp;
    if (!app) {
        console.error('‚ùå App n√£o encontrado');
        return;
    }
    
    try {
        // For√ßar modo real
        app.api.setMode('real');
        console.log('‚úÖ Modo definido para "real"');
        
        // Inicializar SDK
        await app.api.initFacebookSDK();
        console.log('‚úÖ SDK inicializado');
        
        // Tentar login
        console.log('üîë Iniciando login...');
        const result = await app.api.loginWithFacebook();
        
        if (result && result.success) {
            console.log('‚úÖ Login bem-sucedido!');
            console.log('üë§ Usu√°rio:', result.user);
        } else {
            console.log('‚ùå Login falhou');
            console.log('üìã Detalhes:', result);
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste de login:', error);
    }
};

// Fun√ß√£o para limpar e reinicializar
window.resetFacebookConnection = function() {
    console.log('üîÑ === RESETANDO CONEX√ÉO FACEBOOK ===');
    
    // Limpar localStorage
    localStorage.removeItem('facebook_access_token');
    localStorage.removeItem('facebook_token_expires');
    localStorage.removeItem('facebook_account_id');
    console.log('‚úÖ Cache limpo');
    
    // Reset API state
    const app = window.metaAdsApp;
    if (app && app.api) {
        app.api.accessToken = null;
        app.api.tokenExpiresAt = null;
        app.api.accountId = null;
        app.api.user = null;
        app.api.connectionStatus = 'disconnected';
        app.isAuthenticated = false;
        console.log('‚úÖ Estado da API resetado');
    }
    
    // Recarregar SDK se necess√°rio
    const fbScript = document.getElementById('facebook-jssdk');
    if (fbScript) {
        fbScript.remove();
        console.log('‚úÖ Script do SDK removido');
    }
    
    console.log('üí° Recarregue a p√°gina para um reset completo');
};

console.log('üîç Diagn√≥sticos de API carregados!');
console.log('');
console.log('üìã COMANDOS DISPON√çVEIS:');
console.log('‚Ä¢ runAPIDiagnostics() - Diagn√≥stico completo');
console.log('‚Ä¢ quickLoginTest() - Teste r√°pido de login');
console.log('‚Ä¢ resetFacebookConnection() - Reset completo');
console.log('');
console.log('üí° Execute runAPIDiagnostics() para come√ßar!');
// Debug espec√≠fico para o processo de login do Facebook
window.debugFacebookLogin = async function() {
    console.log('üîë === DEBUG DO LOGIN FACEBOOK ===');
    console.log('');
    
    const app = window.metaAdsApp;
    if (!app) {
        console.error('‚ùå App principal n√£o encontrado');
        return;
    }
    
    const api = app.api;
    
    // 1. Verificar pr√©-requisitos
    console.log('1Ô∏è‚É£ Verificando pr√©-requisitos...');
    console.log(`   üé≠ Modo: ${api.mode}`);
    console.log(`   üîí HTTPS/Localhost: ${api.isHttps || ['localhost', '127.0.0.1'].includes(window.location.hostname)}`);
    console.log(`   üì¶ Facebook SDK: ${typeof window.FB !== 'undefined' ? '‚úÖ' : '‚ùå'}`);
    console.log(`   üÜî App ID: ${api.facebookAppId}`);
    console.log(`   üé´ Permiss√µes: ${api.requiredPermissions.join(', ')}`);
    
    if (api.mode !== 'real') {
        console.warn('‚ö†Ô∏è N√£o est√° no modo real - mude para API Real primeiro');
        return;
    }
    
    if (typeof window.FB === 'undefined') {
        console.error('‚ùå Facebook SDK n√£o carregado');
        console.log('üîÑ Tentando carregar SDK...');
        try {
            await api.initFacebookSDK();
            console.log('‚úÖ SDK carregado com sucesso');
        } catch (error) {
            console.error('‚ùå Erro ao carregar SDK:', error);
            return;
        }
    }
    
    // 2. Testar status de login atual
    console.log('');
    console.log('2Ô∏è‚É£ Verificando status atual...');
    
    try {
        const loginStatus = await new Promise((resolve) => {
            window.FB.getLoginStatus(resolve);
        });
        
        console.log(`   üìä Status: ${loginStatus.status}`);
        console.log(`   üìã Response completa:`, loginStatus);
        
        if (loginStatus.status === 'connected') {
            console.log('‚úÖ Usu√°rio j√° est√° conectado!');
            console.log(`   üîë Token: ${loginStatus.authResponse.accessToken.substring(0, 20)}...`);
        } else {
            console.log('‚ùå Usu√°rio n√£o conectado');
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar status:', error);
    }
    
    // 3. Testar acesso √†s permiss√µes
    console.log('');
    console.log('3Ô∏è‚É£ Verificando permiss√µes dispon√≠veis...');
    
    try {
        // Verificar se consegue chamar FB.login
        if (typeof window.FB.login === 'function') {
            console.log('‚úÖ FB.login dispon√≠vel');
        } else {
            console.error('‚ùå FB.login n√£o dispon√≠vel');
        }
        
        // Verificar configura√ß√£o do App
        console.log('üîç Testando configura√ß√£o do App...');
        const testCall = await new Promise((resolve) => {
            window.FB.api(`/${api.facebookAppId}`, (response) => {
                resolve(response);
            });
        });
        
        if (testCall.error) {
            console.warn('‚ö†Ô∏è Poss√≠vel problema com App ID:', testCall.error);
        } else {
            console.log('‚úÖ App ID v√°lido:', testCall.name || 'App encontrado');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar permiss√µes:', error);
    }
    
    console.log('');
    console.log('üéØ PR√ìXIMOS PASSOS:');
    console.log('‚Ä¢ testFacebookLogin() - Testar login completo');
    console.log('‚Ä¢ forceFacebookLogin() - For√ßar login com logs detalhados');
    console.log('‚Ä¢ resetAndTryLogin() - Reset completo e tentativa de login');
};

// Teste de login completo
window.testFacebookLogin = async function() {
    console.log('üß™ === TESTE COMPLETO DE LOGIN ===');
    
    const app = window.metaAdsApp;
    if (!app) {
        console.error('‚ùå App n√£o encontrado');
        return;
    }
    
    try {
        console.log('üîÑ Iniciando processo de login...');
        
        // Garantir que estamos no modo real
        app.api.setMode('real');
        
        // Usar a fun√ß√£o de login da aplica√ß√£o
        const result = await app.handleFacebookLogin();
        
        console.log('üìä Resultado do login:', result);
        
        if (result && result.success) {
            console.log('‚úÖ Login bem-sucedido!');
            console.log(`üë§ Usu√°rio: ${result.user?.name}`);
        } else {
            console.error('‚ùå Login falhou');
            console.log('üìã Detalhes:', result);
        }
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Erro durante teste de login:', error);
        return { success: false, error: error.message };
    }
};

// Login for√ßado com logs detalhados
window.forceFacebookLogin = async function() {
    console.log('üí™ === LOGIN FOR√áADO COM DEBUG ===');
    
    const app = window.metaAdsApp;
    if (!app) {
        console.error('‚ùå App n√£o encontrado');
        return;
    }
    
    const api = app.api;
    
    try {
        // 1. Preparar ambiente
        console.log('1Ô∏è‚É£ Preparando ambiente...');
        api.setMode('real');
        await api.initFacebookSDK();
        
        // 2. Limpar estado anterior
        console.log('2Ô∏è‚É£ Limpando estado anterior...');
        api.logout();
        
        // 3. Tentar login direto via SDK
        console.log('3Ô∏è‚É£ Iniciando login via SDK...');
        
        return new Promise((resolve) => {
            window.FB.login((response) => {
                console.log('üìä Response do FB.login:', response);
                
                if (response.authResponse) {
                    console.log('‚úÖ Login autorizado!');
                    console.log(`   üîë Token: ${response.authResponse.accessToken.substring(0, 20)}...`);
                    console.log(`   ‚è∞ Expira em: ${response.authResponse.expiresIn} segundos`);
                    
                    // Salvar token
                    api.accessToken = response.authResponse.accessToken;
                    api.tokenExpiresAt = Date.now() + (response.authResponse.expiresIn * 1000);
                    localStorage.setItem('facebook_access_token', api.accessToken);
                    localStorage.setItem('facebook_token_expires', api.tokenExpiresAt.toString());
                    
                    // Buscar dados do usu√°rio
                    window.FB.api('/me', { fields: 'name,email,picture' }, (userResponse) => {
                        console.log('üë§ Dados do usu√°rio:', userResponse);
                        
                        if (userResponse.error) {
                            console.error('‚ùå Erro ao buscar dados do usu√°rio:', userResponse.error);
                            resolve({ success: false, error: userResponse.error });
                        } else {
                            api.user = userResponse;
                            api.connectionStatus = 'connected';
                            app.isAuthenticated = true;
                            
                            console.log('üéâ Login completo e bem-sucedido!');
                            resolve({ success: true, user: userResponse, accessToken: api.accessToken });
                        }
                    });
                } else {
                    console.warn('‚ùå Login n√£o autorizado ou cancelado');
                    console.log('üìã Response completa:', response);
                    resolve({ success: false, message: 'Login n√£o autorizado', response });
                }
            }, {
                scope: api.requiredPermissions.join(','),
                return_scopes: true,
                auth_type: 'rerequest'
            });
        });
        
    } catch (error) {
        console.error('‚ùå Erro durante login for√ßado:', error);
        return { success: false, error: error.message };
    }
};

// Reset e tentativa de login
window.resetAndTryLogin = async function() {
    console.log('üîÑ === RESET E LOGIN ===');
    
    // 1. Limpeza completa
    console.log('1Ô∏è‚É£ Fazendo limpeza completa...');
    localStorage.removeItem('facebook_access_token');
    localStorage.removeItem('facebook_token_expires');
    localStorage.removeItem('facebook_account_id');
    
    // 2. Reset do app
    const app = window.metaAdsApp;
    if (app) {
        app.api.logout();
        app.isAuthenticated = false;
        console.log('‚úÖ Estado do app resetado');
    }
    
    // 3. Aguardar um pouco
    console.log('2Ô∏è‚É£ Aguardando estabiliza√ß√£o...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 4. Tentar login
    console.log('3Ô∏è‚É£ Tentando login...');
    return await forceFacebookLogin();
};

// Verificar configura√ß√£o do Facebook App
window.checkFacebookAppConfig = async function() {
    console.log('üîç === VERIFICA√á√ÉO DO FACEBOOK APP ===');
    
    const app = window.metaAdsApp;
    if (!app) {
        console.error('‚ùå App n√£o encontrado');
        return;
    }
    
    const appId = app.api.facebookAppId;
    console.log(`üÜî App ID: ${appId}`);
    
    if (typeof window.FB === 'undefined') {
        console.error('‚ùå Facebook SDK n√£o carregado');
        return;
    }
    
    try {
        // Verificar se o App existe
        const appInfo = await new Promise((resolve) => {
            window.FB.api(`/${appId}`, (response) => {
                resolve(response);
            });
        });
        
        if (appInfo.error) {
            console.error('‚ùå Erro ao verificar App:', appInfo.error);
            
            if (appInfo.error.code === 803) {
                console.log('üí° Poss√≠vel solu√ß√£o: Verificar se o App ID est√° correto');
            }
        } else {
            console.log('‚úÖ App v√°lido encontrado:');
            console.log(`   üìõ Nome: ${appInfo.name || 'N/A'}`);
            console.log(`   üè¢ Categoria: ${appInfo.category || 'N/A'}`);
        }
        
        // Verificar dom√≠nio atual
        const currentDomain = window.location.origin;
        console.log(`üåê Dom√≠nio atual: ${currentDomain}`);
        console.log('üí° Certifique-se de que este dom√≠nio est√° configurado no Facebook App');
        
    } catch (error) {
        console.error('‚ùå Erro durante verifica√ß√£o:', error);
    }
};

console.log('üîë Debug de login carregado!');
console.log('');
console.log('üìã COMANDOS DISPON√çVEIS:');
console.log('‚Ä¢ debugFacebookLogin() - Debug completo do login');
console.log('‚Ä¢ testFacebookLogin() - Teste usando fun√ß√£o da app');
console.log('‚Ä¢ forceFacebookLogin() - Login for√ßado com logs');
console.log('‚Ä¢ resetAndTryLogin() - Reset completo e login');
console.log('‚Ä¢ checkFacebookAppConfig() - Verificar configura√ß√£o do App');
console.log('');
console.log('üí° Comece com: debugFacebookLogin()');